<?php

/**
 * @file
 * Control where users are directed to, once they login or logout.
 */

use \Symfony\Component\HttpFoundation\Request;
use \Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_help().
 */
function login_destination_help($route_name, Request $request) {
  switch ($route_name) {
    case 'help.page.login_destination':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Login Destination module allows you to customize the destination that the user is redirected to after logging in, registering to the site, using a one-time login link or logging out. The destination can be an internal page or an external URL. You may specify certain conditions like pages or user roles and make the destination depend upon them.') . '</p>';
      return $output;
    case 'login_destination.list':
      return '<p>' . t('Login destination rules are evaluated each time a user logs in, registers to the site, uses a one-time login link or logs out. Each rule consists of the destination, path conditions and user roles conditions. First matching rule gets executed.') . '</p>';
  }
}

/**
 * Implements hook_user_login
 */
function login_destination_user_login($account) {
  $config = \Drupal::config('login_destination.settings');
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset' || $config->get('immediate_redirect')) {
    login_destination_perform_redirect('login', $account);
  }
}

/**
 * Implements hook_user_insert
 */
function login_destination_user_insert($account) {
  //if (!$account->id()) {
    // If the user is already logged in, it probably means that they created a
    // user account rather than registering themselves.
  //  login_destination_perform_redirect('login');
  //}
}

/**
 * Implements hook_user_logout
 */
function login_destination_user_logout($account) {
  login_destination_perform_redirect('logout', $account);
}

/**
 * Implements hook_drupal_goto_alter
 */
function login_destination_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  // Note that this functionality cannot be backported do 6.x as Drupal 6 does
  // not call drupal_alter for drupal_goto.

  // This actually may be used also by templates.
  if (isset($GLOBALS['destination'])) {
    $destination = $GLOBALS['destination'];

    // alter drupal_goto
    if (is_array($destination)) {
      $path = $destination[0];
      $options = array();
      if (count($destination) > 1) {
        $options = $destination[1];
      }
    }
    else {
      $path = $destination;
    }
  }
}

/**
 * Pass destination to drupal_goto.
 * @TODO get rid of this function by incorporating it into the LoginDestinationManager & settings
 */
function login_destination_prepare_goto($destination) {
  // Check if $_GET['destination'] should overwrite us
  if (!isset($_GET['destination']) || !variable_get('login_destination_preserve_destination', FALSE)) {
    $GLOBALS['destination'] = $destination;
  }
}

/**
 * Evaluate rules and perform redirect.
 *
 * @param string $trigger
 * @param AccountInterface $account
 */
function login_destination_perform_redirect($trigger = '', AccountInterface $account) {

  if ($destination = \Drupal::service('login_destination.manager')->findDestination($trigger, $account)) {
    \Drupal::service('login_destination.manager')->redirect($destination);
  }
}


/**
 * Load a login destination.
 *
 * @param $id
 * @return \Drupal\Core\Entity\EntityInterface
 */
function login_destination_load($id) {
  return entity_load('login_destination', $id);
}


// @TODO
/*
    // A destination was set, probably on an exception controller,
    if (!$this->request->request->has('destination')) {
      $form_state['redirect_route'] = array(
        'route_name' => 'user.view',
        'route_parameters' => array('user' => $account->id()),
      );
    }
    else {
      $this->request->query->set('destination', $this->request->request->get('destination'));
    }
 */